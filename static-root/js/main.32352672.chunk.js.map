{"version":3,"sources":["logo.svg","tweets/components.js","lookups/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetList","tweet","useState","tweets","setTweets","useEffect","undefined","newTweetsList","unshift","length","callback","resp","fetch","then","json","response","catch","error","console","log","map","action","type","key","id","TweetCreateForm","temporaryNewTweet","newTweet","setNewTweet","textAreaRef","React","createRef","className","onSubmit","event","preventDefault","newTweetContent","current","value","method","name","ref","required","ActionBtn","likes","likeCount","setLikeCount","userLikeState","likeState","setLikeState","onClick","e","Tweet","content","display","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","tweetEl","document","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.32352672.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect }  from 'react';\r\nimport { getTweets } from '../lookups'\r\n\r\n\r\nexport const TweetList = ({tweet}) => {\r\n\r\n    const [tweets, setTweets] = useState([])\r\n    useEffect(() => {\r\n    \tif(tweet !==undefined){\r\n    \t\tconst newTweetsList = tweets.unshift(tweet)\r\n\t    \tif (newTweetsList.length > tweets.length){\r\n    \t\tsetTweets(newTweetsList)\r\n    \t}\r\n\r\n\t}\r\n\r\n    }, [tweets, tweet])\r\n\r\n    useEffect(() => {\r\n\r\n\t    const tweetLookup = (resp) => {\t\r\n\t       setTweets(resp)\r\n\t    }\r\n\t    getTweets(tweetLookup)\r\n\t    \r\n\r\n    }, [])\r\n    \r\n\treturn (\r\n\t\ttweets.map(tweet => {\r\n    \t\treturn <Tweet tweet={tweet} action={{type: 'like'}} key={tweet.id}/>\r\n    \t\t}\r\n    \t)\r\n\t)\r\n\r\n}\r\n\r\nexport const TweetCreateForm = () => {\r\n\r\n\tconst [newTweet, setNewTweet] = useState()\r\n\tconst textAreaRef = React.createRef()\r\n\r\n\r\n\tlet temporaryNewTweet;\r\n\tconst onTweetFormSubmit = (event) => {\r\n\t\tevent.preventDefault()\r\n\t\tconst newTweetContent = textAreaRef.current.value\r\n\t\ttemporaryNewTweet = {'id': 7777, 'content':newTweetContent, 'likes': 0}\r\n\t\tsetNewTweet(temporaryNewTweet)\r\n\t\ttextAreaRef.current.value = ''\r\n\r\n\t}\r\n\tuseEffect(() => {\r\n\t\tsetNewTweet(temporaryNewTweet)\r\n\r\n\t})\r\n\r\n\treturn (\r\n\r\n\t    <div className=\"row\">\r\n        <div className=\"col-md-4 mx-auto col-10\">\r\n            <form onSubmit={onTweetFormSubmit} className=\"form\" method=\"POST\" id=\"create-tweet-form\" action=\"/tweets/create/\">\r\n                <input type=\"hidden\" value=\"/\" name=\"next\" />\r\n                <textarea ref={textAreaRef} required={true} name=\"content\" required='required' className=\"form-control mb-3 rounded\" placeholder=\"Your Tweet...\"></textarea>\r\n                <button  className=\"btn btn-primary mb-2\">Tweet</button>\r\n            </form>\r\n        </div>\r\n        <TweetList tweet={newTweet}/> \r\n    </div>\r\n\r\n\t\t)\r\n\r\n}\r\n\r\nexport function ActionBtn({tweet, action}) {\r\n\r\n\t\tconst [likeCount, setLikeCount] = useState(tweet.likes ? tweet.likes : 0)\r\n\t\tconst [likeState, setLikeState] = useState(tweet.userLikeState==='like' ? \"unlike\" : 'like')\r\n\r\n    \tconst handleBtnAction = (e) => {\r\n\r\n    \t\te.preventDefault()\r\n    \t\tif (action.type==='like'){\r\n    \t\t\tif (likeState === 'like'){\r\n    \t\t\t\tsetLikeCount(tweet.likes+1)\r\n    \t\t\t\tsetLikeState('unlike')\r\n    \t\t\t}else{\r\n    \t\t\t\tsetLikeCount(likeCount-1)\r\n    \t\t\t\tsetLikeState('like')\r\n    \t\t\t}\r\n    \t\t}\r\n    \t}\r\n\t\tif(action.type==='like'){\r\n\t\t\treturn (\r\n\t        \t<button className='btn btn-primary btn-sm' onClick={handleBtnAction} id={`tweet-${tweet.id}`}>\r\n\t        \t {likeCount}Likes</button>\r\n        \t) \r\n\t\t}\r\n\t\telse if(action.type==='unlike'){\r\n        \treturn (\r\n\t        \t<button className='btn btn-primary btn-sm' id={`tweet-${tweet.id}`}>\r\n\t        \t UnLike</button>\r\n\t        \t)\r\n    \t} \r\n    \telse if(action.type==='retweet'){\r\n    \t\treturn (\r\n\t        \t<button className='btn btn-primary btn-sm' id={`tweet-${tweet.id}`}>\r\n\t        \t Retweet</button>\r\n\t        \t)\r\n\r\n    \t}\r\n\r\n    \t}\r\n    \r\nexport const Tweet = ({tweet}) => {\r\n\r\n    return (\r\n\r\n    \t<div className='tweet mb-4 col-12 col-md-10 mx-auto rounded border p-4'>\r\n    \t<p>{tweet.id}-{tweet.content}</p>\r\n    \t<ActionBtn tweet={tweet} action={{type:'like', display:'Like'}}/>\r\n    \t<ActionBtn tweet={tweet} action={{type:'unlike', display: 'UnLike'}}/>\r\n    \t<ActionBtn tweet={tweet} action={{type:'retweet', display:'Retweet'}}/>\r\n    \t</div>\r\n    )\r\n\r\n};\r\n\r\n\r\n\r\n    ","import React from 'react';\r\n\r\nexport function getTweets(callback){\r\n    fetch('http://localhost:8000/tweets/')\r\n    .then(resp => resp.json())\r\n    .then(response => {\r\n\r\n\t    callback(response)\r\n\r\n    })\r\n    .catch(function(error){\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n\r\n","import React  from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetList, TweetCreateForm} from './tweets'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and sav to reload.\n        </p>\n        <div>\n            <TweetCreateForm />\n          </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { TweetCreateForm } from './tweets'\n\nconst tweetEl = document.getElementById('tweet-me')\nconst rootEl = document.getElementById('root')\n\nif (rootEl){\n\tReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n}\nif(tweetEl){\n\n\tReactDOM.render(\n  <React.StrictMode>\n    <TweetCreateForm />\n  </React.StrictMode>,\n  document.getElementById('tweet-me')\n);\n\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}